function x returns the highest of the options from the lowest in function 0

x turn so it goes through all the moves that he can go to and checks all utilities which is based on o so calls the o function

need a function to return the utility for every potential moves
function x:
    if board is terminal
        return utility
    else
        for i in actions
            pick the highest utility from actions
            if action i is terminal return action
            to determine the utility call the o function which will pick the action with the lowest utility
            function o


function o:
    this function will get passed the action and check
    if board is terminal
        return utility
    else
        for i in actions
            pick the highest utility 
            if action i is terminal return utility
            else pick the lowest from the utilities that function x will return



def x(board):
    best = {}
    moves = actions(board)
    if moves == -1:
        return None
    for i in range(len(moves)):
        move = moves[i]

        # Check if this move is terminal, if it is update best variable
        new_board = result(board, move)
        if terminal(new_board):
            best[i] = utility(new_board)

def minimax(board):
    if player(board) == "x":
        possible_moves = actions(board)
        utilities = {}
        for i in range(possible_moves):
            u = min_value(result(board, i))
            if u == 1:
                return possible_moves[i]
            else:
                utilities[i] = u
        # Do the same for x


def max_value(board):
    if terminal(board):
        return utility(board)
    else:
        v = -100
        for i in actions(board):
            v = max(v, min_value(result(board, i)))
        return v


def min_value(board):
    if terminal(board):
        return utility(board)
    else:
        v = 100
        for i in actions(board):
            v = min(v, max_value(result(board, i)))




